//Everything will be passed on the development org.all test cases will be passed in both .

1.public class OpportunityProcessor {
    
    // Method to calculate the total amount of closed won opportunities
    public static Decimal calculateClosedWonTotal() {
        Decimal totalAmount = 0;
        List<Opportunity> closedWonOpps = [SELECT Amount FROM Opportunity WHERE StageName = 'Closed Won'];
        
        for(Opportunity opp : closedWonOpps) {
            totalAmount += opp.Amount;
        }
        
        return totalAmount;
    }
    
    // Method to update opportunity stage based on certain criteria
    public static void updateOpportunityStage(List<Opportunity> oppsToUpdate) {
        for(Opportunity opp : oppsToUpdate) {
            if(opp.Amount > 10000 && opp.StageName != 'Negotiation') {
                opp.StageName = 'Negotiation';
            } else if(opp.Amount < 5000 && opp.StageName != 'Prospecting') {
                opp.StageName = 'Prospecting';
            }
        }
        
        update oppsToUpdate;
    }

    //Test classes
    @isTest
@isTest
private class OpportunityProcessorTest {
    
    @isTest
    static void testCalculateClosedWonTotal() {
        // Create test data
        Opportunity opp1 = new Opportunity(Name = 'Test Opp 1', StageName = 'Closed Won', Amount = 1000,CloseDate = System.Today());
        Opportunity opp2 = new Opportunity(Name = 'Test Opp 2', StageName = 'Closed Won', Amount = 2000,CloseDate = System.Today());
        Opportunity opp3 = new Opportunity(Name = 'Test Opp 3', StageName = 'Proposal', Amount = 3000,CloseDate = System.Today());
        insert new List<Opportunity>{opp1, opp2, opp3};
        
        // Call the method to calculate total amount of closed won opportunities
        Decimal totalAmount = OpportunityProcessor.calculateClosedWonTotal();
        
        // Verify the total amount
        System.assertEquals(3000, totalAmount);
    }

    
    @isTest
    static void testUpdateOpportunityStage() {
        // Create test data
        Opportunity opp1 = new Opportunity(Name = 'Test Opp 1', StageName = 'Qualification', Amount = 2000, CloseDate = System.Today());
        Opportunity opp2 = new Opportunity(Name = 'Test Opp 2', StageName = 'Closed Won', Amount = 8000, CloseDate = System.Today());
        insert new List<Opportunity>{opp1, opp2};
        
        // Call the method to update opportunity stage
        OpportunityProcessor.updateOpportunityStage(new List<Opportunity>{opp1, opp2});
        
        // Retrieve the updated opportunities
        opp1 = [SELECT StageName FROM Opportunity WHERE Id = :opp1.Id];
        opp2 = [SELECT StageName FROM Opportunity WHERE Id = :opp2.Id];
        
        // Verify the updated stages
      System.assertEquals('Prospecting', opp1.StageName);
      System.assertNotEquals('Negotiation', opp2.StageName);
    }
}
2.
trigger AccountTrigger on Account (before insert, before update) {
    List<Contact> contactsToInsert = new List<Contact>();

    // Map to store account ids and their corresponding contacts
    Map<Id, Contact> accountIdToContactMap = new Map<Id, Contact>();

    for (Account acc : Trigger.new) {
        // Check if the account is of type Customer and is being activated
        if (acc.Type == 'Customer' && acc.Active_c && (Trigger.isInsert || (Trigger.isUpdate && acc.Activec != Trigger.oldMap.get(acc.Id).Activec))) {
            // Check if the account has a default contact
            if (!accountIdToContactMap.containsKey(acc.Id)) {
                // Create a new contact based on the mapping
                Contact newContact = new Contact(
                    AccountId = acc.Id,
                    FirstName = acc.Name,
                    LastName = 'Customer Representative', 
                    Email = acc.Company_Emailc, // Assuming Company Email is a custom field on Account
                    Phone = acc.Phone 
                );
                contactsToInsert.add(newContact);
                accountIdToContactMap.put(acc.Id, newContact);
            }
        }
    }

    // Insert the new contacts
    insert contactsToInsert;

    // Set the Account Activation Summary field as required
    for (Account acc : Trigger.new) {
        if (acc.Activec && (Trigger.isInsert || (Trigger.isUpdate && acc.Activec != Trigger.oldMap.get(acc.Id).Activec))) {
            if (acc.Account_Activation_Summaryc == null || acc.Account_Activation_Summary_c.trim() == '') {
                acc.addError('Account Activation Summary is required.');
            }
        }
    }
}
@isTest
private class AccountTriggerTest {
    @isTest
    static void testDefaultContactCreation() {
        // Create a test account
        Account acc = new Account(
            Name = 'Test Account',
            Type = 'Customer',
            Active_c = true,
            Company_Emailc = 'mailto:test@gmail.com',
            Phone = '1234567890',
            Account_Activation_Summary_c='Test Message'
        );
        insert acc;
        
    }

}
